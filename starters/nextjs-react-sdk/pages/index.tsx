import {
  DialectContextProvider,
  useThread,
  useThreadMessages,
  useThreads,
} from '@dialectlabs/react-sdk';
import { Backend, DialectWalletAdapter } from '@dialectlabs/sdk';
import { useWallet, WalletContextState } from '@solana/wallet-adapter-react';
import { PublicKey } from '@solana/web3.js';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useMemo, useState } from 'react';
import styles from '../styles/Home.module.css';

const walletToDialectWallet = (
  wallet: WalletContextState
): DialectWalletAdapter => ({
  publicKey: wallet.publicKey || PublicKey.default, // TODO: should be fixed when sdk would allow publicKey as optional
  signMessage: wallet.signMessage,
  signTransaction: wallet.signTransaction,
  signAllTransactions: wallet.signAllTransactions,
});

const ThreadDetails = ({ address }: { address: PublicKey }) => {
  const findParams = useMemo(() => ({ address }), [address]);
  const { thread } = useThread({ findParams });
  const { messages, send } = useThreadMessages({ address: address });

  const [msg, setMsg] = useState('');

  return (
    <div>
      {messages.map((it, idx) => (
        <p key={idx}>{it.text}</p>
      ))}
      <input
        value={msg}
        onChange={(it) => setMsg(it.target.value)}
        onKeyDown={(it) => {
          if (it.key === 'Enter') {
            send({ text: it.currentTarget.value });
          }
        }}
      />
    </div>
  );
};

const Example = () => {
  const { threads } = useThreads();

  const [selectedThreadAddress, selectThreadAddress] =
    useState<PublicKey | null>(null);

  return (
    <div>
      {threads.map((t, idx) => (
        <p key={idx} onClick={() => selectThreadAddress(t.address)}>
          {t.address.toString()} - {t.backend}
        </p>
      ))}
      {selectedThreadAddress && (
        <ThreadDetails address={selectedThreadAddress} />
      )}
    </div>
  );
};

const Home: NextPage = () => {
  const wallet = useWallet();

  const [dialectWalletAdapter, setDialectWalletAdapter] =
    useState<DialectWalletAdapter>(() => walletToDialectWallet(wallet));

  useEffect(() => {
    setDialectWalletAdapter(walletToDialectWallet(wallet));
  }, [wallet]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a href="https://nextjs.org">Next.js!</a>
        </h1>

        <div className={styles.walletButtons}>
          <DialectContextProvider
            wallet={dialectWalletAdapter}
            environment="local-development"
            backends={[Backend.Solana]}
          >
            <Example />
          </DialectContextProvider>
          {/* <ChatButton wallet={wallet} variables={themeVariables} /> */}
        </div>

        <p className={styles.description}>
          Get started by editing{' '}
          <code className={styles.code}>pages/index.tsx</code>
        </p>

        <div className={styles.grid}>
          <a href="https://nextjs.org/docs" className={styles.card}>
            <h2>Documentation &rarr;</h2>
            <p>Find in-depth information about Next.js features and API.</p>
          </a>

          <a href="https://nextjs.org/learn" className={styles.card}>
            <h2>Learn &rarr;</h2>
            <p>Learn about Next.js in an interactive course with quizzes!</p>
          </a>

          <a
            href="https://github.com/vercel/next.js/tree/canary/examples"
            className={styles.card}
          >
            <h2>Examples &rarr;</h2>
            <p>Discover and deploy boilerplate example Next.js projects.</p>
          </a>

          <a
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
            className={styles.card}
          >
            <h2>Deploy &rarr;</h2>
            <p>
              Instantly deploy your Next.js site to a public URL with Vercel.
            </p>
          </a>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
